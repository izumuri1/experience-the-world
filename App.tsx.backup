import { useEffect, useState } from 'react';
import { StatusBar } from 'expo-status-bar';
import { Text, View, ActivityIndicator, Pressable, Modal, ScrollView } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { db } from './src/database/DatabaseService';
import { mediaService } from './src/services/MediaService';
import { locationService } from './src/services/LocationService';
import { weatherService } from './src/services/WeatherService';
import CameraScreen from './src/screens/CameraScreen';
import AudioRecorder from './src/components/AudioRecorder';
import AudioPlayer from './src/components/AudioPlayer';

export default function App() {
  const [isReady, setIsReady] = useState(false);
  const [locationInfo, setLocationInfo] = useState<string>('');
  const [weatherInfo, setWeatherInfo] = useState<string>('');
  const [showCamera, setShowCamera] = useState(false);
  const [audioMemos, setAudioMemos] = useState<string[]>([]);

  useEffect(() => {
    async function appPrepare() {
      try {
        // データベース初期化
        await db.appInitialize();

        // メディアディレクトリ初期化
        await mediaService.appInitializeDirectories();

        setIsReady(true);
      } catch (error) {
        console.error('Failed to initialize app:', error);
      }
    }

    appPrepare();
  }, []);

  const handleTestLocation = async () => {
    try {
      // パーミッションリクエスト
      const granted = await locationService.appRequestPermission();
      if (!granted) {
        setLocationInfo('位置情報の許可が必要です');
        return;
      }

      // 位置情報と住所を取得
      const location = await locationService.appGetLocationWithAddress();
      setLocationInfo(
        `${location.placeName}\n` +
        `${location.address}\n` +
        `国: ${location.countryCode}\n` +
        `座標: ${location.latitude.toFixed(4)}, ${location.longitude.toFixed(4)}`
      );

      // 天気情報を取得
      const weather = await weatherService.appGetWeather(
        location.latitude,
        location.longitude
      );
      if (weather) {
        setWeatherInfo(
          `${weather.condition}\n` +
          `気温: ${weather.temperature}°C`
        );
      } else {
        setWeatherInfo('天気情報を取得できませんでした');
      }
    } catch (error) {
      console.error('Location test failed:', error);
      setLocationInfo('エラーが発生しました');
    }
  };

  if (!isReady) {
    return (
      <View className="flex-1 bg-primary-500 items-center justify-center">
        <ActivityIndicator size="large" color="#ffffff" />
        <Text className="text-white text-lg mt-4">初期化中...</Text>
      </View>
    );
  }

  return (
    <ScrollView className="flex-1 bg-primary-500">
      <View className="p-6">
        <Text className="text-white text-2xl font-bold text-center">
          Experience the World
        </Text>
        <Text className="text-secondary-500 text-lg mt-4 text-center">
          あなたの旅を記録しよう
        </Text>
        <View className="flex-row items-center justify-center mt-8">
          <Ionicons name="checkmark-circle" size={20} color="#ffffff" />
          <Text className="text-white text-sm ml-2">データベース準備完了</Text>
        </View>

      {/* カメラ起動ボタン */}
      <Pressable
        className="bg-secondary-500 px-6 py-3 rounded-lg mt-8 flex-row items-center justify-center"
        onPress={() => setShowCamera(true)}
      >
        <Ionicons name="camera" size={24} color="#ffffff" />
        <Text className="text-white text-center font-bold text-lg ml-2">
          カメラで記録する
        </Text>
      </Pressable>

      {/* テストボタン */}
      <Pressable
        className="bg-white/20 px-6 py-3 rounded-lg mt-4 flex-row items-center justify-center"
        onPress={handleTestLocation}
      >
        <Ionicons name="location" size={20} color="#ffffff" />
        <Text className="text-white text-center font-bold ml-2">
          位置情報・天気をテスト
        </Text>
      </Pressable>

      {/* 位置情報表示 */}
      {locationInfo ? (
        <View className="bg-white rounded-lg p-4 mt-4">
          <View className="flex-row items-center mb-2">
            <Ionicons name="location" size={18} color="#3388ff" />
            <Text className="text-gray-900 text-sm font-bold ml-2">位置情報</Text>
          </View>
          <Text className="text-gray-900 text-sm">{locationInfo}</Text>
        </View>
      ) : null}

      {/* 天気情報表示 */}
      {weatherInfo ? (
        <View className="bg-white rounded-lg p-4 mt-2">
          <View className="flex-row items-center mb-2">
            <Ionicons name="partly-sunny" size={18} color="#ffc107" />
            <Text className="text-gray-900 text-sm font-bold ml-2">天気情報</Text>
          </View>
          <Text className="text-gray-900 text-sm">{weatherInfo}</Text>
        </View>
      ) : null}

      {/* 音声メモテストセクション */}
      <View className="mt-8">
        <View className="flex-row items-center mb-4">
          <Ionicons name="mic" size={20} color="#ffffff" />
          <Text className="text-white text-lg font-bold ml-2">音声メモテスト</Text>
        </View>

        {/* 録音コンポーネント */}
        <AudioRecorder
          onRecordingComplete={(uri) => {
            setAudioMemos([...audioMemos, uri]);
          }}
          maxDuration={180000}
        />

        {/* 録音済み音声リスト */}
        {audioMemos.length > 0 && (
          <View className="mt-6">
            <Text className="text-white text-sm font-bold mb-3">
              録音済み ({audioMemos.length})
            </Text>
            {audioMemos.map((uri, index) => (
              <View key={index} className="mb-3">
                <AudioPlayer
                  audioUri={uri}
                  showDeleteButton={true}
                  onDelete={() => {
                    setAudioMemos(audioMemos.filter((_, i) => i !== index));
                  }}
                />
              </View>
            ))}
          </View>
        )}
      </View>
      </View>

      {/* カメラ画面モーダル */}
      <Modal
        visible={showCamera}
        animationType="slide"
        presentationStyle="fullScreen"
      >
        <View className="flex-1">
          {/* 閉じるボタン */}
          <Pressable
            className="absolute top-12 left-4 z-10 bg-neutral-800/70 px-4 py-2 rounded-full flex-row items-center"
            onPress={() => setShowCamera(false)}
          >
            <Ionicons name="close" size={20} color="#ffffff" />
            <Text className="text-white font-bold ml-1">閉じる</Text>
          </Pressable>

          <CameraScreen />
        </View>
      </Modal>

      <StatusBar style="light" />
    </ScrollView>
  );
}
